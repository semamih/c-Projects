#include <iostream>
#include <fstream>

using namespace std;

void swapRows(int** array, int row1, int row2, int N) {
    for (int j = 0; j < N; ++j) {
        std::swap(array[row1][j], array[row2][j]);
    }
}
void swapColumns(int** arr, int col1, int col2, int N) {
    for (int i = 0; i < N; ++i) {
        // Обмен значений между столбцами col1 и col2
        int temp = arr[i][col1];
        arr[i][col1] = arr[i][col2];
        arr[i][col2] = temp;
    }
}

int main() {
    setlocale(LC_ALL, "RU");
    int N = 0;
    int value = 0;

    // Запросить у пользователя число N
    cout << "Введите число N: ";
    cin >> N;
    while (cin.fail() == 1) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Очистка буфера
        cout << "Ошибка. Введите число!" << endl;
        cin >> N;
    }
    while (N <= 0) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "Ошибка. Число должно быть больше нуля!" << endl;
        cin >> N;
    }

    // Создать динамический двумерный массив размером N x N
    int** snakeArray = new int* [N];
    for (int i = 0; i < N; ++i) {
        snakeArray[i] = new int[N];
    }

    cout << "С какого угла вы хотите начать змейку?" << endl << "Введите соответствующее число: " << endl << "1 - с левого верхнего" << endl << "2 - с левого нижнего" << endl << "3 - с правого верхнего" << endl << "4 - с правого нижнего" << endl;
    cin >> value;
    while (cin.fail() == 1) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Очистка буфера
        cout << "Ошибка. Введите число!" << endl;
        cin >> value;
    }
    while (value <= 0 && value > 4) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "Ошибка. Число должно быть больше нуля!" << endl;
        cin >> value;
    }

    int num = 1;
    int num2 = 1;
    int a = 0;
    int b = N - 1;
    int num3 = 1;
    int num4 = N * N;
    
    switch (value)
    {
    case 1:
        for (int diag = 0; diag < N * 2; ++diag) {
            for (int i = max(0, diag - N + 1); i <= min(diag, N - 1); ++i) {
                int j = diag - i;
                if (diag % 2 == 0) {  // направление изменяется на каждой диагонали
                    snakeArray[i][j] = num;
                }
                else {
                    snakeArray[j][i] = num;
                }
                ++num;
            }
        }
        // Вывести полученный массив
        cout << "Полученный массив:" << endl;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                cout << snakeArray[i][j] << '\t';
            }
            cout << endl;
        }
        cout << "Массив успешно сохранен в файл output.txt." << endl;
        break;
    case 2:
        for (int diag = 0; diag < N * 2; ++diag) {
            for (int i = max(0, diag - N + 1); i <= min(diag, N - 1); ++i)
            {
                int j = diag - i;
                if (diag % 2 == 0)
                {
                    snakeArray[i][j] = num3;
                }
                else {
                    snakeArray[j][i] = num3;
                }

                ++num3;
            }
        }
        if (N % 2 == 0)
        {
            for (int i = 0; i < (N / 2); i++) {
                swapRows(snakeArray, a, b, N);
                a++;
                b--;
            }
        }
        else
        {
            for (int i = 0; i < (N - 1) / 2; i++) {
                swapRows(snakeArray, a, b, N);
                a++;
                b--;
            }
        }
        // Вывести полученный массив
        cout << "Полученный массив:" << endl;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                cout << snakeArray[i][j] << '\t';
            }
            cout << endl;
        }
        cout << "Массив успешно сохранен в файл output.txt." << endl;
        break;
    case 3:
        for (int diag = 0; diag < N * 2; ++diag) {
            for (int i = max(0, diag - N + 1); i <= min(diag, N - 1); ++i)
            {
                int j = diag - i;
                if (diag % 2 == 0)
                {
                    snakeArray[i][j] = num;
                }
                else {
                    snakeArray[j][i] = num;
                }

                ++num;
            }
        }
        if (N % 2 == 0)
        {
            for (int i = 0; i < (N / 2); i++) {
                swapColumns(snakeArray, a, b, N);
                a++;
                b--;
            }
        }
        else
        {
            for (int i = 0; i < (N - 1) / 2; i++) {
                swapColumns(snakeArray, a, b, N);
                a++;
                b--;
            }
        }
        // Вывести полученный массив
        cout << "Полученный массив:" << endl;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                cout << snakeArray[i][j] << '\t';
            }
            cout << endl;
        }
        cout << "Массив успешно сохранен в файл output.txt." << endl;
        break;
    case 4:
        // Заполнить массив числами от 1 до N^2 по возрастанию "змейкой"
        for (int diag = 0; diag < N * 2; ++diag) {
            for (int i = max(0, diag - N + 1); i <= min(diag, N - 1); ++i) {
                int j = diag - i;
                if (diag % 2 == 0) {  // направление изменяется на каждой диагонали
                    snakeArray[i][j] = num4;
                }
                else {
                    snakeArray[j][i] = num4;
                }
                --num4;
            }
        }
        // Вывести полученный массив
        cout << "Полученный массив:" << endl;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                cout << snakeArray[i][j] << '\t';
            }
            cout << endl;
        }
        cout << "Массив успешно сохранен в файл output.txt." << endl;
        break;
    default:
        cout << "Введите число от 1 до 4!";
        break;
    }


    // Открыть файл
    ofstream outputFile("output.txt");
    if (!outputFile.is_open()) {
        cout << "Не удалось открыть файл для записи." << endl;
        return 1;
    }

    // Записать массив в файл
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            outputFile << snakeArray[i][j] << '\t';
        }
        outputFile << '\n';
    }

    // Закрыть файл
    outputFile.close();

    // Освободить выделенную память для массива
    for (int i = 0; i < N; ++i) {
        delete[] snakeArray[i];
    }
    delete[] snakeArray;

    return 0;
}

